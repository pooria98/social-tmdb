generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id
    name          String
    email         String
    emailVerified Boolean    @default(false)
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @default(now()) @updatedAt
    sessions      Session[]
    accounts      Account[]
    favorites     Favorite[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@map("account")
}

model Verification {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@map("verification")
}

model Media {
    id          String     @id // TMDB id (string because TV + movie ids can overlap)
    type        MediaType
    title       String
    posterUrl   String?
    overview    String?
    releaseDate String?
    updatedAt   DateTime   @updatedAt
    favorites   Favorite[]

    @@unique([id, type])
}

model Favorite {
    id      Int       @id @default(autoincrement())
    userId  String
    mediaId String
    type    MediaType
    user    User      @relation(fields: [userId], references: [id])
    media   Media     @relation(fields: [mediaId, type], references: [id, type])

    @@unique([mediaId, type, userId]) // prevent duplicates
}

enum MediaType {
    movie
    series
    celebrity
}
